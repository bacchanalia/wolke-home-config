#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray);

my $DIR = '/home/wolke/Euler';

my $usage = "Usage:
  $0 [-f|--force] [-v|--verbose] [-t N | --threads=N] all
  $0 [-f|--force] [-v|--verbose] [-t N | --threads=N] PROBLEM [PROBLEM ..]
";

sub run($$$);
sub compile($$$$);
sub getAllProblemNums();

sub main(@){
  my $force;
  my $threads;
  my $verbose;

  my $ok = GetOptionsFromArray(\@_,
    'force', \$force,
    'verbose', \$verbose,
    'threads=i', \$threads,
  );
  $threads = 1 if not defined $threads;
  die $usage if not $ok or @_ == 0;

  my @probNums;
  if(@_ == 1 and $_[0] eq 'all'){
    @probNums = getAllProblems();
  }else{
    @probNums = @_;
  }
  for my $n(@probNums){
    die $usage if $n !~ /^\d+$/;
  }

  chdir $DIR;

  for my $num(@probNums){
    $num = 0+$num;
    if($num < 10){
      $num = "00$num";
    }elsif($num <100){
      $num = "0$num";
    }

    my $res = compile $num, $force, $verbose, $threads;
    if($res != 0){
      print "Compile failed with code: $res\n";
    }else{
      run $num, $verbose, $threads;
    }
  }
}

sub compile($$$$){
  my $num = shift;
  my $force = shift;
  my $verbose = shift;
  my $threads = shift;

  if(defined $force){
    system "rm -f $DIR/problem$num";
    system "rm -f $DIR/problem$num.o";
    system "rm -f $DIR/problem$num.hi";
  }
  my @threaded = $threads > 1 ? ("-threaded") : ();
  my @verbosity = defined $verbose ? () : ("-v0");

  system "ghc", "--make", @threaded, "$DIR/problem$num.hs", "-O", @verbosity;
  return $?;
}

sub run($$$){
  my $num = shift;
  my $verbose = shift;
  my $threads = shift;
  
  if(defined $verbose){
    print "Started running at " . localtime() . "\n";
  }

  my $exec;
  if($threads > 1){
    $exec = "$DIR/problem$num +RTS -N$threads -RTS";
  }else{
    $exec = "$DIR/problem$num";
  }  

  if(not defined $verbose){
    my $start = time;
    
    my $out = `$exec`;
    chomp $out;
    $out =~ s/(?<=[^\\])\\n/\n/g;
    
    my $end = time;
    my $time = $end-$start;
  
    if($time < 10){
      $time = "00$time";
    }elsif($time <100){
      $time = "0$time";
    }

    print "p$num|$time|$out|\n";
  }else{
    my $out = `time $exec`;
    $out =~ s/(?<=[^\\])\\n/\n/g;
    print $out;
  }
}

sub getAllProblemNums(){
  my @problems = split /\n/, `ls -1 $DIR/problem*.hs`;
  my @probNums;

  foreach my $prob(@problems){
    die "Malformed problem hs file: $prob\n" if $prob !~ /(\d+)/;
    push @probNums, $1;
  }
  return @probNums;
}

&main(@ARGV);
