#!/usr/bin/perl
use strict;
use warnings;

my $usage = "Usage:
  $0 -h|--help
     print this usage
  $0 [-s|-f|-a] [-d] [delay] command [args]
     run command repeatedly until cmd exits with non-zero exit code
       if no args are present, command is shell interpolated
       e.g.:
         $0 echo hello world
           like: while [ 1 ]; do echo hello world; sleep1; done
         $0 ls *
           like: x=*; while [ 1 ]; do ls \$x; sleep 1; done
         $0 'ls *'
           like: while [ 1 ]; do ls *; sleep 1; done
     delay how long to sleep between commands
           defaults to 1, <= 0 means run without sleeping
     -d    run 'date' before each invokation
     -s    run until success
           stop running command when the last exit code was zero
     -a    run always; never exit regardless of exit code
";

sub runOrDie(@){
  system @_;
  exit $? if $? != 0;
}

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $untilSuccess = 0;
  my $untilFailure = 1;
  if(@_ > 0 and $_[0] =~ /^(-s|-a)$/){
    my $arg = shift;
    $untilSuccess = 1 if $arg eq '-s';
    $untilFailure = 0 if $arg eq '-s';
    $untilFailure = 0 if $arg eq '-a';
  }

  die $usage if @_ == 0;
  my $printDate = 0;
  $printDate = shift if $_[0] =~ /^-d$/;
 
  die $usage if @_ == 0;
  my $delay = 1;
  $delay = shift if $_[0] =~ /^\d+(?:\.\d+)?$/;

  die $usage if @_ == 0;
  while(1){
    runOrDie "date" if $printDate;
    system @_;
    exit $? if $? == 0 and $untilSuccess;
    exit $? if $? != 0 and $untilFailure;
    runOrDie "sleep", $delay if $delay >= 0;
  }
}

&main(@ARGV);
