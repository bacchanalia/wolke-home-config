#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor;

my $file = "$ENV{HOME}/TODO";

my $usage = "Usage:
  $0 [-u|-r|-a]  Parse ${file}'s git history to print todos
    -u   print unresolved, outstanding todos only
    -r   print resolved todos only
    -a   print all todos, unresolved first {default}
";


sub getTodos($$$$$);
sub todoFmt($$$$);
sub dateFmt($);
sub col($$);

sub main(@){
  my $args = join "|", qw(-u -r -a);
  die "Usage: $0 [$args]\n" if @_ > 1 or (@_ == 1 and $_[0] !~ /^$args$/);
  my $arg = shift;
  $arg = '-a' if not defined $arg;

  my (%addTodos, %resolveTodos);

  my $diff = `git diff $file`;
  getTodos $diff, time(), '', \%addTodos, \%resolveTodos if length $diff > 0;

  for my $entry(`git log --format=format:"%H:::%at:::%s" $file`){
    if($entry =~ /^([a-f0-9]+):::(\d+):::(.*)$/){
      my ($commit, $date, $summary) = ($1, $2, $3);
      my $diff = `git diff-tree --cc $commit`;
      getTodos $diff, $date, $summary, \%addTodos, \%resolveTodos;
    }else{
      die "malformed git log line: $entry";
    }
  }

  for my $todo(keys %resolveTodos){
    die "todo never added: $todo\n" if not defined $addTodos{$todo};
  }

  my @todos = sort {
    ${$addTodos{$b}}[0] <=> ${$addTodos{$a}}[0]
  } keys %addTodos;

  my @unresolved;
  my @resolved;

  for my $todo(@todos){
    my $dateAdded = dateFmt ${$addTodos{$todo}}[0];
    my $resTodo = $resolveTodos{$todo};
    my $resolution = defined $resTodo ? $$resTodo[1] : 'NONE';
    my $dateResolved = defined $resTodo ? dateFmt $$resTodo[0] : undef;
    
    my $line = todoFmt $todo, $resolution, $dateAdded, $dateResolved;
    if(defined $resTodo){
      push @resolved, $line;
    }else{
      push @unresolved, $line;
    }
  }

  print @unresolved if $arg =~ /-a|-u/;
  print "\n\n\n" if $arg =~ /-a/;
  print @resolved if $arg =~ /-a|-r/;
}

sub getTodos($$$$$){
  my ($diff, $date, $summary, $addTodos, $resolveTodos) = @_;
  my $resolution = $summary =~ /finish|complete|fix/i ? 'FIXED' : 'DISCARDED';

  if($diff =~ s/^
    (.*\n){2,5}
    ---.*\n
    \+\+\+.*\n
    @@.*@@\n//x){
    for my $line(split /\n/, $diff){
      if($line =~ /^\+-?(.*)$/){
        die "TODO ADDED TWICE: $line\n" if defined $$addTodos{$1};
        $$addTodos{$1} = [$date, undef];
      }elsif($line =~ /^--?(.*)$/){
        die "TODO RESOLVED TWICE: $line\n" if defined $$resolveTodos{$1};
        $$resolveTodos{$1} = [$date, $resolution];
      }
    }
  }else{
    die "malformed diff:\n$diff\n";
  }
}

sub todoFmt($$$$){
  my ($todo, $resolution, $dateAdded, $dateResolved) = @_;

  my %resColor = (
    FIXED => 'white bold',
    NONE => 'red bold',
    DISCARDED => 'blue bold',
  );

  my %resFmt = (
    FIXED => 'x',
    NONE => ' ',
    DISCARDED => '~',
  );

  my $resDate = defined $dateResolved ? " $dateResolved" : '';
  return ''
    . "[$resFmt{$resolution}]"
    . " $dateAdded"
    . col($resColor{$resolution}, " $todo")
    . (defined $dateResolved ? " {$dateResolved}" : '')
    . "\n"
    ;
}

sub dateFmt($){
  my $d = `date -d \@$_[0] +'%Y-%m-%d %H:%M'`;
  chomp $d;
  return $d;
}

sub col($$){
  return color($_[0]) . $_[1] . color('reset');
}

&main(@ARGV);
