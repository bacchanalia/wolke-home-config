#!/usr/bin/perl
use strict;
use warnings;

sub assertIp($);
sub assertMac($);
sub parseConfig($);
sub getDefaultUser();
sub getHosts();
sub setHosts($);
sub usb();
sub guessIps();
sub wifi();

if(@ARGV == 0){
  die "NO CONFIG FILE PASSED IN\n";
}
my $file = shift;
my %config = %{parseConfig `cat $file`};

die "hostname not defined in conf\n" if not defined $config{hostname};
my $hostname = $config{hostname};
my $hostsMarker = "ipmagic:$hostname";

my $usage = "Usage:
    $0
      establish hosts file, up devices, and print hostname
    $0 -vnc [ARGS]
      calls the vnc cmd, with args
      e.g.: for n9-vnc: `$0 -vnc rotate90 -- -quality 0`
    $0 -s CMD ARG ARG..
      setup and then ssh with command and args
    $0 -b SHELLCMD
      setup and then invoke single cmd string in bash\n";

sub main(@){
  my $vncCmd;
  my $isSsh = 0;
  my @sshCmd;
  my $sshUser;
  if(@_ > 0 and $_[0] eq '-vnc'){
    shift;
    $vncCmd = defined $config{vncCommand} ? $config{vncCommand} : 'vnc';
    if(@_ > 0){
      $vncCmd .= " @_";
    }elsif(defined $config{vncDefaultArgs}){
      $vncCmd .= " $config{vncDefaultArgs}";
    }
  }elsif(@_ > 0 and $_[0] =~ /^(-s|-b)$/){
    $isSsh = 1;

    my $arg = shift;
    if(@_ > 1 and $_[0] eq '-u'){
      shift;
      $sshUser = shift;
    }else{
      $sshUser = getDefaultUser();
    }
    if($arg eq '-s'){
      @sshCmd = @_;
    }elsif($arg eq '-b'){
      die "-b argument needs single shell argument\n" if @_ > 1;
      my $c = shift;
      $c =~ s/'/'\\''/g;
      @sshCmd = ("bash -c '$c'");
    }
  }elsif(@_ > 0){
    die $usage;
  }

  my $ok;
  $ok = usb if not $ok;
  $ok = wifi if not $ok;
  $ok = guessIps if not $ok;
  die "Could not get an ip\n" if not $ok;

  my $user = $config{defaultUser};
  if(defined $vncCmd){
    exec $vncCmd;
  }elsif($isSsh){
    exec "ssh", "$sshUser\@$hostname", @sshCmd;
  }else{
    print "$hostname\n";
  }
}

sub assertIp($){
  my $ip = shift;
  if($ip !~ /^\d+\.\d+\.\d+\.\d+$/){
    die "'$ip' is not an ip4 address\n"
  }
}

sub assertMac($){
  my $mac = shift;
  my $seg = "[0-9a-f]{2}";
  if($mac !~ /^$seg:$seg:$seg:$seg:$seg:$seg$/i){
    die "'$mac' is not a mac address\n"
  }
}

sub parseConfig($){
  my %config;
  my @macs;
  my @ipGuesses;
  my %ssidIps;
  my %scriptNameToUser;

  my @lines = split /\n/, shift();
  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    die "Malformed conf: $line\n" if $line !~ /^\s*([a-z]+)\s*=\s*(.+?)\s*$/i;
    my ($key, $val) = ($1, $2);

    if($key eq 'mac'){
      assertMac $val;
      push @macs, $val;
    }elsif($key eq 'ipGuess'){
      assertIp $val;
      push @ipGuesses, $val;
    }elsif($key eq 'ssid'){
      if($val !~ /^(.+?)\s*:\s*(\d+\.\d+\.\d+\.\d+)/){
        die "Malformed ssid ip conf: $val\n";
      }
      my ($ssid, $ip) = ($1, $2);
      $ssidIps{$ssid} = $ip;
    }elsif($key eq 'scriptNameToUser'){
      if($val !~ /^\s*([^:]+?)\s*:\s*([^:]+?)\s*/){
        die "Malformed scriptname-user pair: $val\n";
      }
      my ($scriptName, $user) = ($1, $2);
      $scriptNameToUser{$scriptName} = $user;
    }elsif($key =~ /^(usbLocalIp|usbRemoteIp)$/){
      die "Duplicate conf entry $key\n" if defined $config{$key};
      assertIp $val;
      $config{$key} = $val;
    }elsif($key =~ /^(hostname|vncCommand|vncDefaultArgs|defaultUser)$/){
      die "Duplicate conf entry $key\n" if defined $config{$key};
      $config{$key} = $val;
    }else{
      die "Unknown conf entry: $key\n";
    }
  }
  $config{macs} = \@macs;
  $config{ipGuesses} = \@ipGuesses;
  $config{ssidIps} = \%ssidIps;
  $config{scriptNameToUser} = \%scriptNameToUser;
  return \%config;
}

sub getDefaultUser(){
  my $defaultUser = $config{defaultUser};
  if(defined $config{scriptNameToUser}){
    my %scriptNameToUser = %{$config{scriptNameToUser}};
    my $scriptName = $0;
    $scriptName = $1 if $scriptName =~ /([^\/]*)$/;
    if(defined $scriptNameToUser{$scriptName}){
      $defaultUser = $scriptNameToUser{$scriptName};
    }
  }
  return $defaultUser;
}

sub getHosts(){
  for my $line(`cat /etc/hosts`){
    if($line =~ /^(\d+\.\d+\.\d+\.\d+)\s*$hostname\s*#$hostsMarker$/){
      return $1;
    }
  }
  return undef;
}

sub setHosts($){
  my $ip = shift;
  my $old = getHosts();
  if(not defined $ip){
    if(defined getHosts()){
      print STDERR "removing $hostname line from /etc/hosts\n";
    }else{
      return;
    }
  }else{
    if(not defined $old or $old ne $ip){
      print STDERR "replacing $hostname line in /etc/hosts\n";
    }else{
      return;
    }
  }

  my @lines = `cat /etc/hosts`;
  for my $line(@lines){
    if($line =~ /^(\d+\.\d+\.\d+\.\d+)\s*$hostname\s*#$hostsMarker$/){
      $line = '';
    }
  }
  if(defined $ip and $ip =~ /^\d+\.\d+\.\d+\.\d+$/){
    push @lines, "$ip\t$hostname#$hostsMarker\n";
  }
  open FH, "| sudo tee /etc/hosts > /dev/null"
    or die "Couldnt open /etc/hosts for writing\n";
  print FH @lines;
  close FH;
}

sub usb(){
  if(not defined $config{usbLocalIp} or not defined $config{usbRemoteIp}){
    return 0;
  }
  my $localIp = $config{usbLocalIp};
  my $remoteIp = $config{usbRemoteIp};

  my $ifconfig = `ifconfig -a`;
  my @macs = @{$config{macs}};
  foreach my $mac(@macs){
    #if($ifconfig =~ /^([a-z0-9_]+).*$mac\s*$/mi){
    if($ifconfig =~ /^(usb\d+)/mi){ #assume any usb, because mac keeps changing
      my $dev = $1;
      $ifconfig = `ifconfig $dev`;
      if($ifconfig !~ /inet addr:$localIp/){
        print STDERR "USB DEVICE UP\n";
        system "sudo ifconfig"
          . " $dev $localIp netmask 255.255.255.0 up"
          . " > /dev/null"
          ;
      }
      setHosts $remoteIp;
      return 1;
    }
  }
  return 0;
}

sub guessIps(){
  setHosts undef;
  if(defined $config{guessIps}){
    my @ips = @{$config{guessIps}};
    system 'ensure-host', $hostname, @ips;
    if($? == 0){
      return 1;
    }else{
      print STDERR "Error ensuring host: $!\n";
    }
  }
  return 0;
}

sub wifi(){
  my %ssidIps;
  if(defined $config{ssidIps}){
    %ssidIps = %{$config{ssidIps}};
  }
  my $iwconfig = `iwconfig 2>/dev/null`;
  my $ssid = lc $1 if $iwconfig =~ /ESSID:"(.*)"/;
  my $ip = defined $ssid ? $ssidIps{$ssid} : undef;
  if(defined $ip){
    setHosts $ip;
    return 1;
  }
  return 0;
}

&main(@ARGV);
