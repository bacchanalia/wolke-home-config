#!/usr/bin/perl
use strict;
use warnings;

my $file = "$ENV{HOME}/.ddwrt";
my $macRe = ("[a-fA-F0-9]{2}:" x 5) . "[a-fA-F0-9]{2}";
my $baseFile = "/tmp/ddwrt";

my %wifiAtts = map {$_ => 1} qw(
  ssid mode net_mode channel channelbw wpa_psk
);
my %encWifiAtts = map {$_ => 1} qw( wpa_psk );

my $usage = "Usage:
  $0 -h|--help
    Print this message
  $0 [info]
    Print restore bootstrap instructions
  $0 show
    run nvram show
  $0 encrypt KEY
    pass in a wpa key or whatever for encrypting and putting into $file
  $0 restore
    ssh in and setup nvram
    prints nvram info to:
      ${baseFile}_old_TIME
      ${baseFile}_new_TIME
      ${baseFile}_change_TIME.sh
";

sub ddwrtShow($);
sub ddwrtRestore($);
sub getStarted($);
sub parse($);
sub getClientIds($);
sub encrypt($);
sub decrypt($);
sub getNvram($);
sub getPublicKeyNvram($);
sub getWifiNvram($);
sub getStaticLeasesNvram($);
sub getExtraNvram($);
sub getPortForwardingNvram($);

sub assertPresent($$;$){
  my ($c, $section, $item) = @_;
  if(defined $item){
    die "Missing $section.$item\n" if not defined $$c{$section}{$item};
  }else{
    die "Missing section $section\n" if not defined $$c{$section};
  }
}

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  my $arg = shift;
  $arg = 'info' if not defined $arg;
  if(@_ == 1 and $arg eq 'encrypt'){
    print encrypt $_[0];
    print "\n";
    exit 0;
  }

  die $usage if @_ > 0 or $arg !~ /^(info|show|restore)$/;

  my $c = parse $file;
  assertPresent $c, 'config';
  assertPresent $c, 'config', 'ip_prefix';
  assertPresent $c, 'config', 'router_ip';
  assertPresent $c, 'clients';
  if($arg eq 'info'){
    print getStarted $c;
  }elsif($arg eq 'show'){
    ddwrtShow $c;
  }elsif($arg eq 'restore'){
    ddwrtRestore $c;
  }
}

sub ddwrtShow($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};
  system "ssh root\@$ip nvram show";
}

sub ddwrtRestore($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};

  my @cmds = map {"nvram set '$_'"} getNvram($c);

  my $now = time;
  my $oldF = "${baseFile}_old_${now}";
  my $newF = "${baseFile}_new_${now}";
  my $changesF = "${baseFile}_changes_${now}.sh";

  open FH, "> $changesF";
  print FH join("\n", @cmds);
  close FH;
  system "scp", $changesF, "root\@$ip:$changesF";

  my $old = `ssh root\@$ip nvram show`;
  open FH, "> $oldF";
  print FH $old;
  close FH;

  system "ssh", "root\@$ip", "sh $changesF";

  my $new = `ssh root\@$ip nvram show`;
  open FH, "> $newF";
  print FH $new;
  close FH;

  print "DIFF:\n";
  system "diff $oldF $newF";

  print "nvram commit [y/N]?\n";
  if(<STDIN> eq "y\n"){
    system "ssh", "root\@$ip", "nvram commit";
  }
  print "router reboot [y/N]?\n";
  if(<STDIN> eq "y\n"){
    system "ssh", "root\@$ip", "reboot";
  }
}

sub getStarted($){
  my $c = shift;
  return "
1) hold pin, or Administration => Factory Defaults => Restore => Ok
2)

   wconnect $$c{config}{default_ssid} WPA $$c{config}{default_wpa}

3) browser $$c{config}{router_ip} => Services => Secure Shell => SSHd Enable
   admin/password
   cancel, skip[], cancel, done
4) paste in your pubkey, or use router password
5) $0 restore
";
}

sub parse($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open $file for reading\n";
  my @lines = <FH>;
  close FH;

  my $c = {};
  my $sectionName = undef;
  for my $line(@lines){
    $line =~ s/#.*//;
    if($line =~ /^ \s* \[ \s* (.+?) \s* \] \s* $/x){
      $sectionName = $1;
    }elsif($line =~ /^ \s* ([^=\ \n\t]+) \s* = \s* (.*)$/x){
      my $section;
      if(not defined $sectionName){
        die "Malformed config file line {missing header}: $line\n";
      }elsif(not defined $$c{$sectionName}){
        $section = {};
        $$c{$sectionName} = $section;
      }else{
        $section = $$c{$sectionName};
      }
      $$section{$1} = $2;
    }elsif($line !~ /^\s*$/){
      die "Malformed config file line: $line\n";
    }
  }
  return $c;
}

sub getClientIds($){
  my $c = shift;
  my @ids = sort keys %{$$c{clients}};
  for my $id(@ids){
    die "ID '$id' needs to be two digits\n" if $id !~ /^\d\d$/;
  }
  return @ids;
}

sub encrypt($){
  my $s = shift;
  $s = `gpg-sym $s`;
  chomp $s;
  return $s;
}

sub decrypt($){
  my $s = shift;
  $s = `gpg-sym $s`;
  chomp $s;
  return $s;
}

sub getNvram($){
  my $c = shift;
  return (
    getPublicKeyNvram($c),
    getWifiNvram($c),
    getStaticLeasesNvram($c),
    getPortForwardingNvram($c),
    getExtraNvram($c),
  );
}

sub getPublicKeyNvram($){
  my $ssh = `cat ~/.ssh/*.pub`;
  return "sshd_authorized_keys=$ssh";
}

sub getWifiNvram($){
  my $c = shift;
  my @entries;

  for my $section(keys %$c){
    if($section =~ /^ath\d+$/){
      my $radio = $section;
      my $s = $$c{$radio};
      for my $att(sort keys %wifiAtts){
        if(defined $$s{$att}){
          my $val = $$s{$att};
          $val = decrypt $val if defined $encWifiAtts{$att};
          push @entries, "${radio}_$att=$val";
        }
      }
    }
  }
  return @entries;
}

sub getStaticLeasesNvram($){
  my $c = shift;
  my $ipPrefix = $$c{config}{ip_prefix};

  my @entries;
  for my $id(getClientIds($c)){
    my $val = $$c{clients}{$id};
    if($val !~ /^($macRe)\s*(.*)$/){
      die "Malformed client line: $val\n";
    }
    my ($mac, $hostname) = ($1, $2);
    push @entries, "$mac=$hostname=$ipPrefix.$id=";
  }

  my $leaseNum = 'static_leasenum=' . (@entries + 0);
  my $leases = 'static_leases=' . join ' ', @entries;
  return ($leaseNum, $leases);
}

sub getPortForwardingNvram($){
  my $c = shift;
  my $ip_prefix = $$c{config}{ip_prefix};

  my @entries;
  if(defined $$c{forwards}){
    for my $name(keys %{$$c{forwards}}){
      my $val = $$c{forwards}{$name};
      if($val !~ /^(\d+) \s* (\d+) \s* (\d+) \s* (udp|tcp|both)$/x){
        die "Malformed forward line {id from to udp|tcp|both}: $val\n";
      }
      my ($id, $from, $to, $type) = ($1, $2, $3, $4);
      push @entries, "$name:on:$type:$from>$ip_prefix.$id:$to";
    }
  }

  my $trans_port_prefix = $$c{config}{trans_port_prefix};
  my $ssh_port_prefix = $$c{config}{ssh_port_prefix};
  my $trans_port_prefix_alt = $$c{config}{trans_port_prefix_alt};
  my $ssh_port_prefix_alt = $$c{config}{ssh_port_prefix_alt};

  if(defined $ssh_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "ssh-$id";
      my $port = "$ssh_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $ssh_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "ssh-alt-$id";
      $id += 20;
      my $port = "$ssh_port_prefix_alt$id";
      push @entries, "ssh-alt-$id:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $trans_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "trans-$id";
      my $port = "$trans_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }
  if(defined $trans_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "trans-alt-$id";
      $id += 20;
      my $port = "$trans_port_prefix_alt$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }

  my $fwdNum = 'forwardspec_entries=' . (@entries + 0);
  my $fwd = 'forward_spec=' . join ' ', @entries;
  return ($fwdNum, $fwd);
}

sub getExtraNvram($){
  my $c = shift;
  my @nvram;
  if(defined $$c{nvram}){
    for my $key(keys %{$$c{nvram}}){
      push @nvram, "$key=$$c{nvram}{$key}";
    }
  }
  return @nvram;
}

&main(@ARGV);
