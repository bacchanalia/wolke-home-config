#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(sleep);
use IPC::Open3;
use Symbol qw(gensym);

my $main = "/media/videos";
my $mirror = "/media/stuff/Videos";
my $piMain = "/media/pi-videos";

my @categories = (
  "Backup",
  "Clips Shorts Trailers",
  "Events",
  "Movies",
  "Series",
  "Anime",
  "Concerts",
);
my $okCats = join "|", @categories;

my $usage = "Usage: $0 [--sync] [--quick] [--nomount]\n";

sub readInfoCache($);
sub writeInfoCache($$);
sub formatInfoLine($$);
sub updateInfoCache($$);
sub parseDuration($);
sub formatDuration($);
sub formatSizeSummary($$);
sub getSizes();
sub readExcludeFile();
sub syncExcludeFile();
sub checkExcludes($$);
sub getRsyncExcludes($);
sub md5($);
sub fmtSize($);
sub isMountPoint($);
sub printCmd(@);
sub run(@);
sub runQuiet(@);
sub runPrompt(@);
sub readProc(@);
sub readProcSilent(@);
sub readProcStdout($$);

sub main(@){
  my $sync = 0;
  if(@_ > 0 and $_[0] eq "--sync"){
    $sync = 1;
    shift;
  }
  my $quick = 0;
  if(@_ > 0 and $_[0] eq "--quick"){
    $quick = 1;
    shift;
  }
  my $nomount = 0;
  if(@_ > 0 and $_[0] eq "--nomount"){
    $nomount = 1;
    shift;
  }
  die $usage if @_ != 0;

  die "ERROR: $mirror does not exist\n" if not -d $mirror;
  if(not isMountPoint $main){
    print "$main is not mounted, trying $piMain\n";
    if(not $nomount){
      run "nfs-pi-mount-videos", "-u";
      run ("nfs-pi-mount-videos", $quick ? ("--quick") : ());
    }

    if(isMountPoint($piMain)){
      print "using $piMain\n";
      $main = $piMain;
    }else{
      die "Could not mount $piMain\n";
    }
  }

  if($sync){
    print "\n";
    print "=====\n";
    syncExcludeFile();
    print "=====\n\n";
  }

  my $excludes = readExcludeFile();
  my $sizes = getSizes();

  print "=====\n";
  print "Size summary\n";
  my $fmtInfo = formatSizeSummary($excludes, $sizes);
  open FH, "> $main/size-summary" or die "Cannot write to $main/size-summary";
  print FH $fmtInfo;
  close FH;
  print $fmtInfo;
  run "cp", "-a", "$main/size-summary", "$mirror/size-summary";
  print "=====\n\n";

  print "=====\n";
  print "Excluded files that are still present:\n";
  my $unexcluded = checkExcludes $excludes, $sizes;
  print map {"$_\n"} @$unexcluded;
  print "=====\n\n";

  my $rsyncExcludes = getRsyncExcludes $excludes;

  my @rsyncInfo = qw(rsync -a --ignore-existing --info=NAME --dry-run);

  print "=====\n";
  print "New INTERNAL files: (rsync -n, no excludes, $mirror/ => $main/)\n";
  runQuiet @rsyncInfo, "$mirror/", "$main/";
  print "=====\n\n";

  print "=====\n";
  print "New EXTERNAL files: (rsync -n, <EXCLUDES>, $main/ => $mirror/)\n";
  runQuiet @rsyncInfo, @$rsyncExcludes, "$main/", "$mirror/";
  print "=====\n\n";

  my @rsyncInfoExisting = qw(rsync -a --existing --info=NAME --dry-run);

  print "=====\n";
  print "MODIFIED\n";
  runQuiet @rsyncInfoExisting, "$mirror/", "$main/";
  print "=====\n\n";

  my @rsyncReal = qw(rsync -avP --ignore-existing);

  if($sync){
    print "=====\n";
    print "INTERNAL => EXTERNAL\n";
    run @rsyncReal, "$mirror/", "$main/";
    print "=====\n\n";

    print "=====\n";
    print "EXTERNAL => INTERNAL\n";
    run @rsyncReal, @$rsyncExcludes, "$main/", "$mirror/";
    print "=====\n\n";
  }else{
    print "run with --sync to sync INTERNAL <=> EXTERNAL\n";
  }

  print "=====\n";
  print "Info cache\n";
  updateInfoCache $main, "$main/info-cache";
  run "cp", "-a", "$main/info-cache", "$mirror/info-cache";
  print "=====\n\n";

  if($main eq $piMain and not $nomount){
    print "unmounting nfs\n";
    run "nfs-pi-mount-videos", "-u";
  }
}

sub readInfoCache($){
  my ($cacheFile) = @_;
  my $cache = {};
  if(-e $cacheFile){
    open FH, "< $cacheFile" or die "Could not read $cacheFile\n";
    my @lines = <FH>;
    close FH;
    for my $line(@lines){
      next if $line =~ /^\s*$/;
      chomp $line;
      if($line =~ /^
        \s*        (\d+|\?)k
        \s* \| \s* (\d+:\d\d:\d\d\.\d\d|\?)
        \s* \| \s* (.+)
      $/x){
        my ($size, $dur, $file) = ($1, $2, $3);
        $size = undef if $size eq "?";
        $dur = parseDuration $dur;
        $$cache{$file} = [$size, $dur];
      }else{
        die "Malformed info cache line: $line\n";
      }
    }
  }
  return $cache;
}
sub writeInfoCache($$){
  my ($cacheFile, $cache) = @_;
  my @lines = map{formatInfoLine($cache, $_)} sort keys %$cache;
  open FH, "> $cacheFile" or die "Could not write to $cacheFile\n";
  print FH @lines;
  close FH;
}
sub formatInfoLine($$){
  my ($cache, $file) = @_;
  die "missing $file\n" if not defined $$cache{$file};
  my ($size, $dur) = @{$$cache{$file}};

  my $sizeFmt = defined $size ? sprintf "%9d", $size : sprintf "%9s", "?";
  my $durFmt = formatDuration $dur;
  return "${sizeFmt}k | ${durFmt} | $file\n";
}
sub updateInfoCache($$){
  my ($dir, $cacheFile) = @_;
  my $cache = readInfoCache $cacheFile;

  chdir $dir;
  my @files = readProc "find", "-mindepth", "2", "-type", "f";
  chomp foreach @files;
  s/^\.\/// foreach @files;

  my %okFiles = map {$_ => 1} @files;

  for my $file(keys %$cache){
    if(not defined $okFiles{$file}){
      delete $$cache{$file};
      print "Remove: $file\n";
      writeInfoCache $cacheFile, $cache;
    }
  }

  for my $file(sort @files){
    if(not defined $$cache{$file}){
      my $size = readProc "du", "-s", $file;
      chomp $size;
      $size = $size =~ /^(\d+)\s/ ? $1 : undef;

      my $dur = readProcSilent "duration", "-s", "$dir/$file";
      chomp $dur;
      $dur = $dur =~ /^(\d+\.\d+)\s/ ? $1 : undef;

      $$cache{$file} = [$size, $dur];
      print "Add: " . formatInfoLine($cache, $file);
      writeInfoCache $cacheFile, $cache;
    }
  }
}

sub parseDuration($){
  my $dur = shift;
  return undef if $dur =~ /^\s*\?\s*$/;
  if($dur !~ /^(\d+):(\d+):(\d+|\d+.\d+)$/){
    die "Malformed duration: $dur\n";
  }
  return $1*60*60 + $2*60 + $3;
}

sub formatDuration($){
  my $dur = shift;
  return sprintf "%11s", "?" if not defined $dur;

  my $h = int($dur/60/60);
  my $m = int($dur/60) - ($h*60);
  my $s = $dur - ($h*60*60) - ($m*60);
  return sprintf '%02d:%02d:%05.2f', $h, $m, $s;
}

sub formatSizeSummary($$){
  my ($excludes, $sizes) = @_;
  my $msg = "";

  my $total = 0;
  my $totalExcluded = 0;
  for my $cat(@categories){
    my $catTotal = 0;
    my $catTotalExcluded = 0;
    $msg .= "$cat\n";
    my $catSizes = $$sizes{$cat};
    for my $file(sort {$$catSizes{$b} <=> $$catSizes{$a}} keys %$catSizes){
      my $size = $$catSizes{$file};
      my $sizeFmt = fmtSize $size;
      my $isExcluded = defined $$excludes{$cat}{$file};
      my $exclFmt = $isExcluded ? "*" : " ";

      if($isExcluded){
        $catTotalExcluded += $size;
        $totalExcluded += $size;
      }else{
        $catTotal += $size;
        $total += $size;
      }
      $msg .= "$exclFmt$sizeFmt $file\n";
    }
    my $fmtTotal = fmtSize($catTotal);
    my $fmtTotalExcluded = fmtSize($catTotalExcluded);
    $msg .= "$cat total: $fmtTotal (+$fmtTotalExcluded excluded)\n";
    $msg .= "\n";
  }
  my $fmtTotal = fmtSize($total);
  my $fmtTotalExcluded = fmtSize($totalExcluded);
  $msg .= "Total: $fmtTotal (+$fmtTotalExcluded excluded)\n";
}

sub getSizes(){
  my $sizes = {};
  for my $cat(@categories){
    my $catSizes = {};
    for my $file(readProc "ls", "$main/$cat"){
      chomp $file;
      my $size = readProc "du", "-s", "$main/$cat/$file";
      die "Failed du: $file\n" if $size !~ /^(\d+)/;
      $size = $1;
      $$catSizes{$file} = $size;
    }
    $$sizes{$cat} = $catSizes;
  }
  return $sizes;
}

sub readExcludeFile(){
  my $excludeFile = "$main/exclude";
  die "Not found: $excludeFile\n" if not -f $excludeFile;
  my $excludes = {};
  $$excludes{$_} = {} foreach @categories;
  my $cat;
  for my $line(readProc "cat", $excludeFile){
    chomp $line;
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    if($line =~ /^($okCats)$/){
      $cat = $line;
    }elsif($line =~ /^-/){
      $line =~ s/^-//;
      die "Missing category\n" if not defined $cat;
      die "Unknown category\n" if not defined $$excludes{$cat};
      $$excludes{$cat}{$line} = 1;
    }else{
      die "Malformed line: $line\n";
    }
  }
  return $excludes;
}

sub syncExcludeFile(){
  my $mainExclude = "$main/exclude";
  my $mirrorExclude = "$mirror/exclude";

  my $mainMd5 = md5 $mainExclude;
  my $mirrorMd5 = md5 $mirrorExclude;

  if($mainMd5 ne $mirrorMd5){
    print "exclude file changed\n";
    my $mainMod = readProc "stat", "-c%Y", $mainExclude;
    chomp $mainMod;
    my $mirrorMod = readProc "stat", "-c%Y", $mirrorExclude;
    chomp $mirrorMod;

    if($mirrorMod > $mainMod){
      print "$mirrorExclude is newer, using that\n";
      run "cp", "-a", $mirrorExclude, $mainExclude;
    }else{
      print "$mainExclude is newer, using that\n";
      run "cp", "-a", $mainExclude, $mirrorExclude;
    }
  }else{
    print "exclude file unchanged\n";
  }
}

sub checkExcludes($$){
  my ($excludes, $sizes) = @_;
  my $unexcluded = [];
  for my $cat(keys %$excludes){
    for my $file(keys %{$$excludes{$cat}}){
      die "Unknown exclude: $cat/$file\n" if not defined $$sizes{$cat}{$file};
      my $mirrorFile = "$mirror/$cat/$file";
      push @$unexcluded, $mirrorFile if -e $mirrorFile;
    }
  }
  return $unexcluded;
}

sub getRsyncExcludes($){
  my ($excludes) = @_;
  my $rsyncExcludes = [];
  for my $cat(keys %$excludes){
    for my $file(keys %{$$excludes{$cat}}){
      push @$rsyncExcludes, "--exclude=$cat/$file";
    }
  }
  return $rsyncExcludes;
}

sub md5($){
  my $file = shift;
  my $md5 = readProcSilent "md5sum", $file;
  if($md5 =~ /^([0-9a-f]{32})\s*/){
    return $1;
  }else{
    die "Error finding md5sum for: $file\n";
  }
}

sub fmtSize($){
  return sprintf "%5.1fG", $_[0] / 1024 / 1024;
}

sub isMountPoint($){
  system "mountpoint \"$_[0]\" >/dev/null 2>/dev/null";
  return $? == 0;
}

sub printCmd(@){
  my @escArgs;
  for my $arg(@_){
    my $escArg = $arg;
    if($escArg =~ /[ '"\\\$!]/){
      $escArg =~ s/'/'\\''/g;
      $escArg = "'$escArg'";
    }
    push @escArgs, $escArg;
  }
  print "@escArgs\n";
}

sub run(@){
  printCmd @_;
  runQuiet @_;
}
sub runQuiet(@){
  system @_;
  die "Error running @_\n" if $? != 0;
}
sub runPrompt(@){
  print "@_\nRun above [y/N]? ";
  my $ok = <STDIN>;
  if($ok eq "y\n"){
    run @_;
  }
}

sub readProc(@){
  return readProcStdout \@_, ">&STDERR";
}
sub readProcSilent(@){
  return readProcStdout \@_, ">/dev/null";
}
sub readProcStdout($$){
  my $cmd = shift;
  my $stderr = shift;
  my $pid = open3(gensym, \*OUT, $stderr, @$cmd);
  my @lines = <OUT>;
  waitpid($pid, 0);
  if(wantarray){
    return @lines;
  }else{
    return join '', @lines;
  }
}

&main(@ARGV);
