#!/usr/bin/perl
use strict;
use warnings;

my $width = shift;
my $height = shift;
my @colors = @ARGV;

#draw a series of rectangles, one above the other.
#all the rectanges together represent contiguous slices of time,
#  wherein nothing changed.
#each rectangle represents a percentage of something from the slice of time
#  e.g. memory used in kb / total mem in kb
sub drawScanSet($$){
  my @pxs = @{shift()};
  my $colWidth = shift;
  my $prevPx = 0;
  my $col='';
  my $last;
  my @indexes;
  for(my $i=@pxs-1; $i>=0; $i--){
    if($pxs[$i] > 0){
      push @indexes, $i;
      $last = $i;
    }
  }

  if(@indexes == 0){
    $col = "^p($colWidth)";
  }
  for my $i(@indexes){
    my $px = $pxs[$i];
    my $color = $colors[$i];
    $col .=
      "^fg($color)" . 
      "^pa(;$prevPx)" .
      "^r(${colWidth}x$px)";
    if($i != $last){
      $col .= "^p(-$colWidth)";
    }
    $prevPx += $px;
  }
  return $col;
}

sub same($$){
  my @arr1 = @{shift()};
  my @arr2 = @{shift()};
  if(@arr1 != @arr2){
    return 0;
  }
  for(my $i=0; $i<@arr1; $i++){
    return 0 if $arr1[$i] ne $arr2[$i];
  }
  return 1;
}

#changes the percentages into pixels
#finds contiguous time slices wherein nothing changed
#draws all the time slices
sub drawAllScans($){
  my @scans = @{shift()};
  my @scansPxs;
  
  #convert the percentages into pixels
  for my $scan(@scans){
    my @scanPercentages = @{$scan};
    my $total=0;
    my @pxs;
    for my $per(@scanPercentages){
      if($per > 0){
        my $px = int(($height-2) * ($per/100.0));
        $px = 1 if $px == 0;
        $total += $px;
        push @pxs, $px;
      }else{
        push @pxs, 0;
      }
    }

    while(@pxs > 0 && $total > $height-2){
      for(my $i=@pxs-1; $i>=0; $i--){
        if($pxs[$i] > 0){
          $pxs[$i]--;
          $total--;
          last;
        }
      }
    }
    while(@pxs > 0 && $total < $height-2){
      for(my $i=0; $i<@pxs; $i++){
        if($pxs[$i] < $height-2){
          $pxs[$i]++;
          $total++;
          last;
        }
      }
    }

    push @scansPxs, \@pxs;
  }

  my $out = '';

  my @prevPxs;
  my $scanSetSize = 0;
  for my $scanPxs(@scansPxs){
    my @pxs = @{$scanPxs};
    if($scanSetSize > 0 and not same \@pxs, \@prevPxs){
      $out .= drawScanSet \@prevPxs, $scanSetSize;
      $scanSetSize = 0;
    }
    @prevPxs = @pxs;
    $scanSetSize++;
  }
  if($scanSetSize > 0){
    $out .= drawScanSet \@prevPxs, $scanSetSize;
  }

  return $out;
}

local $| = 1;
my @scans = map [], @{[1..$width]};
while(my $line = <STDIN>){
  chomp($line);
  shift @scans;
  my @scan = split / /, $line;
  push @scans, \@scan;

  my $out = "^ib(1)";
  $out .= drawAllScans(\@scans);
  $out .= "^ib(0)";
  $out .= "^fg()";
  $out .= "^pa()";
  print "$out\n";
}
