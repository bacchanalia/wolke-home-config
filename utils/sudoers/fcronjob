#!/usr/bin/perl
use strict;
use warnings;

my $file = "$ENV{HOME}/.fcrontab";

my $usage = "Usage:
  $0                          - list all named jobs
  $0 JOBNAME [on|off|toggle]  - comment or uncomment JOBNAME line
  $0 JOBNAME [del]            - remove JOBNAME line
  $0 JOBNAME HH:MM            - add a new alarm-once job, for HH:MM
     JOBNAME is exactly two alphanumeric characters
     HH:MM is hours 00-23 and minutes 00-59
";

sub appendAlarmOnce($$$);
sub listNamedJobs();
sub setJobState($$);
sub readFcronLines();
sub writeFcronLines($);
sub modifyLine($$);

sub main(@){
  if(@_ == 0){
    listNamedJobs;
    exit 0;
  }
  my $jobName = shift() || '';
  my $arg = shift() || '';

  die $usage if @_ > 0;
  die $usage if $jobName !~ /^[0-9A-Za-z]{2}$/;
  die $usage if $arg !~ /^(on|off|toggle|del|\d\d:\d\d)$/;

  if($arg =~ /^(on|off|toggle|del)$/){
    setJobState $jobName, $arg;
  }
  if($arg =~ /^(\d\d):(\d\d)$/){
    appendAlarmOnce $jobName, $1, $2;
  }
}

sub appendAlarmOnce($$$){
  my ($jobName, $hour, $min) = @_;
  my $cmd = "su $ENV{USER} -lc 'alarm-once $jobName' #$jobName";
  my $line = "$min $hour * * * $cmd\n";
  print "appending:\n$line";
  my @lines = (readFcronLines(), $line);
  writeFcronLines \@lines;
  system "fcronreset";
}

sub setJobState($$){
  my $jobName = shift;
  my $state = shift;

  my $modified = 0;
  my @lines = readFcronLines();
  for my $line(@lines){
    if($line =~ /^\s*(?!##).*#$jobName\s*$/){
      $line = modifyLine $line, $state;
      $modified = 1;
      last;
    }
  }
  if($modified){
    writeFcronLines(\@lines);
    system "fcronreset";
  }else{
    die "Job $jobName not found\n";
  }
}

sub listNamedJobs(){
  my(@active, @inactive);
  for my $line(readFcronLines){
    if($line =~ /^\s*(?!##).*#([0-9A-Za-z]{2})$/){
      my $name = $1;
      if($line =~ /^\s*#[^#]/){
        push @inactive, "$name => $line";
      }else{
        push @active, "$name => $line";
      }
    }
  }
  print @active;
  print "\ninactive:\n  " . join "  ", @inactive;
}

sub readFcronLines(){
  open FH, "< $file" or die "Could not read $file\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}

sub writeFcronLines($){
  my @lines = @{shift()};
  open FH, "> $file" or die "Could not write $file\n";
  print FH @lines;
  close FH;
}

sub modifyLine($$){
  my $line = shift;
  my $state = shift;
  
  print "OLD: $line";
  if($state eq 'del'){
    $line = '';
    print "<deleted>\n";
  }else{
    my $commented = ($line =~ s/^\s*#([^#])/$1/);
    if($state eq 'off' or ($state eq 'toggle' and not $commented)){
      $line = "#$line";
    }
    print "NEW: $line";
  }
  return $line;
}

&main(@ARGV);
