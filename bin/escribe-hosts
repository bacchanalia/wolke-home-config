#!/usr/bin/perl
use strict;
use warnings;

my $hostsFile = "/etc/hosts";
my $sshConfigFile = "$ENV{HOME}/.ssh/config";
my $defaultUser = "ewolk";
my $marker = "###escribe-hosts###";

sub getHosts();
sub getSSHConfig();

my $escribe = [
  'garuda'    => '10.1.11.11',
  'dev'       => '10.1.12.19',
  'dev1'      => '172.18.10.91',
  'dev2'      => '172.18.10.92',
  'datadict'  => '10.1.12.21',
  'source'    => '10.1.12.10',
  'trac'      => '10.1.12.11',
  'build'     => '10.1.12.20',
  'demo'      => '10.1.7.11',
  'proxy'     => '10.1.4.8',
  'web'       => '10.1.14.20',
  'backupa'   => '10.1.4.13',
  'tx'        => '172.18.10.15',
  'edi'       => '10.1.3.12',
  'monitor'   => '10.1.11.9',
  'web.escribehost.com' => '10.1.14.20',
  'escribehost.com'     => '10.1.14.20',
#  'cchit'     => '10.1.13.19',
#  'stage'     => '10.1.13.12',
#  'demo-edge' => '10.1.7.12',
#  'qa'        => '10.1.13.13',
];

sub main(@){
  die "Cannot run $0 as root\n" if `whoami` eq "root\n";
  die "Usage: $0\n" if @_ != 0;

  my @hostLines = getHosts();
  my @sshConfigLines = getSSHConfig();

  push @sshConfigLines, "$marker\n";
  for(my $i=0; $i<@$escribe; $i+=2){
    my ($host, $ip) = ($$escribe[$i], $$escribe[$i+1]);
    push @hostLines, "$ip\t$host.escribe.com $marker\n" if $host !~ /\./;
    push @hostLines, "$ip\t$host $marker\n";
    push @sshConfigLines, ("Host $host\n", "    User $defaultUser\n");
  }
  push @sshConfigLines, "$marker\n";

  print "\n\nhosts:\n";
  open FH, "| sudo tee $hostsFile" or die "Could not write to $hostsFile\n";
  print FH @hostLines;
  close FH;

  print "\n\nssh config:\n";
  open FH, "| tee $sshConfigFile" or die "Could not write to $hostsFile\n";
  print FH @sshConfigLines;
  close FH;
}

sub getHosts(){
  open FH, "< $hostsFile" or die "Could not read $hostsFile\n";
  my @lines = <FH>;
  close FH;

  #remove lines with comment #escribe-host at the end
  for my $line(@lines){
    $line = '' if $line =~ /$marker\s*$/;
  }
  return @lines;
}

sub getSSHConfig(){
  return () if not -e $sshConfigFile;
  open FH, "< $sshConfigFile" or die "Could not read $sshConfigFile\n";
  my @lines = <FH>;
  close FH;

  my $remove = 0;
  my @okLines;
  for my $line(@lines){
    if($line =~ /^\s*$marker\s*$/){
      $remove = not $remove;
    }else{
      push @okLines, $line unless $remove;
    }
  }
  return @okLines;
}

&main(@ARGV);
