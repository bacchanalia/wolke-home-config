#!/usr/bin/perl
use strict;
use warnings;

sub assertIp($);
sub assertMac($);
sub parseConfig($);
sub hostsMarker($);
sub getHosts($);
sub setHosts($$);
sub usb($);
sub guessIps($);
sub wifi($);

my $usage = "Usage:
    $0 CONF_FILE [-u USER]
      setup hosts file, init usb devices, and print hostname
    $0 CONF_FILE [-u USER] -vnc [ARGS]
      setup hosts file, init usb devices, and call vncCmd
      e.g.: for n9-vnc: `$0 -vnc rotate90 -- -quality 0`
    $0 CONF_FILE [-u USER] -s [CMD ARG ARG..]
      setup hosts file, init usb devices, and ssh to host
    $0 CONF_FILE [-u USER] -b BASHCMD
      setup hosts file, init usb devices, and ssh with bash -c SHELLCMD
    $0 CONF_FILE --host
      print the hostname and exit, doing nothing else
    USER is the user that will be used in -s, -b, and -vnc\n";

sub main(@){
  my $confFile = shift;
  die $usage if not defined $confFile or not -e $confFile;
  my %config = %{parseConfig $confFile};
  die "hostname not defined in conf\n" if not defined $config{hostname};
  my $hostname = $config{hostname};
  if(@_ == 1 and $_[0] eq '--host'){
    print "$hostname\n";
    exit 0;
  }

  my $sshUser;
  if(@_ > 1 and $_[0] eq '-u'){
    shift;
    $sshUser = shift;
  }elsif(defined $config{defaultUser}){
    $sshUser = $config{defaultUser};
  }else{
    $sshUser = 'root';
  }

  my $vncCmd;
  my $isSsh = 0;
  my @sshCmd;
  if(@_ > 0 and $_[0] eq '-vnc'){
    shift;
    if(defined $config{vncCommand}){
      $vncCmd = $config{vncCommand};
    }else{
      $vncCmd = "vnc $sshUser\@$hostname";
    }
    if(@_ > 0){
      $vncCmd .= " @_";
    }elsif(defined $config{vncDefaultArgs}){
      $vncCmd .= " $config{vncDefaultArgs}";
    }
  }elsif(@_ > 0 and $_[0] eq '-s'){
    shift;
    $isSsh = 1;
    @sshCmd = @_;
  }elsif(@_ > 0 and $_[0] eq '-b'){
    shift;
    $isSsh = 1;
    die "-b argument needs single shell argument\n" if @_ > 1;
    my $c = shift;
    $c =~ s/'/'\\''/g;
    @sshCmd = ("bash -c '$c'");
  }elsif(@_ > 0){
    die $usage;
  }

  my $ok;
  $ok = usb \%config if not $ok;
  $ok = wifi \%config if not $ok;
  $ok = guessIps \%config if not $ok;
  die "Could not get an ip\n" if not $ok;

  if(defined $vncCmd){
    exec $vncCmd;
  }elsif($isSsh){
    exec "ssh", "$sshUser\@$hostname", @sshCmd;
  }else{
    print "$hostname\n";
  }
}

sub assertIp($){
  my $ip = shift;
  if($ip !~ /^\d+\.\d+\.\d+\.\d+$/){
    die "'$ip' is not an ip4 address\n"
  }
}

sub assertMac($){
  my $mac = shift;
  my $seg = "[0-9a-f]{2}";
  if($mac !~ /^$seg:$seg:$seg:$seg:$seg:$seg$/i){
    die "'$mac' is not a mac address\n"
  }
}

sub parseConfig($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open conf $file\n";
  my @lines = <FH>;
  close FH;

  my %config;
  my @macs;
  my @ipGuesses;
  my %macIps;
  my %ssidIps;

  for my $line(@lines){
    $line =~ s/#.*//;
    next if $line =~ /^\s*$/;
    die "Malformed conf: $line\n" if $line !~ /^\s*([a-z]+)\s*=\s*(.+?)\s*$/i;
    my ($key, $val) = ($1, $2);
    my ($valLeft, $valRight);
    if($val =~ /^ \s* (\S* | "[^"]*" ) \s* :: \s* (\S* | "[^"]*") \s*$/x){
      ($valLeft, $valRight) = ($1, $2);
    }

    if($key eq 'mac'){
      assertMac $val;
      push @macs, $val;
    }elsif($key eq 'ipGuess'){
      assertIp $val;
      push @ipGuesses, $val;
    }elsif($key eq 'macIp'){
      if(not defined $valLeft or not defined $valRight){
        die "Malformed mac ip conf: $val\n";
      }
      assertMac($valLeft);
      assertIp($valRight);
      $macIps{lc $valLeft} = lc $valRight;
    }elsif($key eq 'ssidIp'){
      if(not defined $valLeft or not defined $valRight){
        die "Malformed ssid ip conf: $val\n";
      }
      assertIp($valRight);
      $ssidIps{lc $valLeft} = lc $valRight;
    }elsif($key =~ /^(usbLocalIp|usbRemoteIp)$/){
      die "Duplicate conf entry $key\n" if defined $config{$key};
      assertIp $val;
      $config{$key} = $val;
    }elsif($key =~ /^(hostname|vncCommand|vncDefaultArgs|defaultUser)$/){
      die "Duplicate conf entry $key\n" if defined $config{$key};
      $config{$key} = $val;
    }else{
      die "Unknown conf entry: $key\n";
    }
  }
  $config{macs} = \@macs;
  $config{ipGuesses} = \@ipGuesses;
  $config{macIps} = \%macIps;
  $config{ssidIps} = \%ssidIps;
  return \%config;
}

sub hostsMarker($){
  my %config = %{shift()};
  my $hostname = $config{hostname};
  return "ipmagic:$hostname";
}

sub getHosts($){
  my %config = %{shift()};
  my $hostsMarker = hostsMarker \%config;
  my $hostname = $config{hostname};
  for my $line(`cat /etc/hosts`){
    if($line =~ /^(\d+\.\d+\.\d+\.\d+)\s*$hostname\s*#$hostsMarker$/){
      return $1;
    }
  }
  return undef;
}

sub setHosts($$){
  my %config = %{shift()};
  my $hostsMarker = hostsMarker \%config;
  my $hostname = $config{hostname};
  my $ip = shift;
  my $old = getHosts \%config;
  if(not defined $ip){
    if(defined $old){
      print STDERR "removing $hostname line from /etc/hosts\n";
    }else{
      return;
    }
  }else{
    if(not defined $old or $old ne $ip){
      print STDERR "replacing $hostname line in /etc/hosts\n";
    }else{
      return;
    }
  }

  my @lines = `cat /etc/hosts`;
  for my $line(@lines){
    if($line =~ /^(\d+\.\d+\.\d+\.\d+)\s*$hostname\s*#$hostsMarker$/){
      $line = '';
    }
  }
  if(defined $ip and $ip =~ /^\d+\.\d+\.\d+\.\d+$/){
    push @lines, "$ip\t$hostname#$hostsMarker\n";
  }
  open FH, "| sudo tee /etc/hosts > /dev/null"
    or die "Couldnt open /etc/hosts for writing\n";
  print FH @lines;
  close FH;
}

sub usb($){
  my %config = %{shift()};
  if(not defined $config{usbLocalIp} or not defined $config{usbRemoteIp}){
    return 0;
  }
  my $localIp = $config{usbLocalIp};
  my $remoteIp = $config{usbRemoteIp};

  my $ifconfig = `ifconfig -a`;
  my @macs = @{$config{macs}};
  foreach my $mac(@macs){
    #if($ifconfig =~ /^([a-z0-9_]+).*$mac\s*$/mi){
    if($ifconfig =~ /^(usb\d+)/mi){ #assume any usb, because mac keeps changing
      my $dev = $1;
      $ifconfig = `ifconfig $dev`;
      if($ifconfig !~ /inet addr:$localIp/){
        print STDERR "USB DEVICE UP\n";
        system "sudo ifconfig"
          . " $dev $localIp netmask 255.255.255.0 up"
          . " > /dev/null"
          ;
      }
      setHosts \%config, $remoteIp;
      return 1;
    }
  }
  return 0;
}

sub guessIps($){
  my %config = %{shift()};
  my $hostname = $config{hostname};
  setHosts \%config, undef;
  if(defined $config{guessIps}){
    my @ips = @{$config{guessIps}};
    system 'ensure-host', $hostname, @ips;
    if($? == 0){
      return 1;
    }else{
      print STDERR "Error ensuring host: $!\n";
    }
  }
  return 0;
}

sub wifi($){
  my %config = %{shift()};
  my %macIps = %{$config{macIps}} if defined $config{macIps};
  my %ssidIps = %{$config{ssidIps}} if defined $config{ssidIps};

  my $iwconfig = `iwconfig 2>/dev/null`;
  my $mac = lc $1 if $iwconfig =~ /Access Point: ([a-z0-9:]+)/i;
  my $ssid = lc $1 if $iwconfig =~ /ESSID:"(.*)"/;
 
  my $ip;
  $ip = $macIps{$mac} if defined $mac and not defined $ip;
  $ip = $ssidIps{$ssid} if defined $ssid and not defined $ip;
  if(defined $ip){
    setHosts \%config, $ip;
    return 1;
  }
  return 0;
}

&main(@ARGV);
