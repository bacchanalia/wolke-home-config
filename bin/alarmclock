#!/usr/bin/perl
use strict;
use warnings;

my $dir = `echo -n \$HOME/.alarms`;
if(not -d $dir){
  die "$dir is not a directory\n";
}
chdir $dir;
my @alarmFiles = `ls $dir`;
chomp $_ for @alarmFiles;

my @daysOfTheWeek = qw(su mo tu we th fr sa);
my $dayPattern = join '|', @daysOfTheWeek;
my $dayRe = qr/$dayPattern/;

sub getRepeatDays($){
  my $alarm = shift;
  if($alarm =~ /^\@\s/){
    return [];
  }elsif($alarm =~ /^[^@]/){
    return undef;
  }elsif($alarm =~ /^\@($dayRe)-($dayRe)\s/){
    my $startIndex;
    my $endIndex;
    for(my $i=0; $i<@daysOfTheWeek; $i++){
      $startIndex = $i if $daysOfTheWeek[$i] eq $1;
      $endIndex = $i if $daysOfTheWeek[$i] eq $2;
    }
    my @dotw = (@daysOfTheWeek, @daysOfTheWeek);
    $endIndex += 7 if $endIndex < $startIndex;
    my @days = @dotw[$startIndex..$endIndex];
    return \@days;
  }elsif($alarm =~ /^\@($dayRe(?:,$dayRe)*)\s/){
    my @days = split /,/, $1;
    return \@days;
  }else{
    die "Improperly formatted repeat-days-of-the-week: $alarm\n";
  }
}

sub twodigit($){
  return $_[0] < 10 ? "0$_[0]" : $_[0];
}

sub getRelativeTimeSeconds($){
  my $time = shift;
  if($time =~ /^\d+$/){
    $time .= 'm';
  }

  if($time =~ /^ (?:(\d+)h)?  (?:(\d+)m)?  (?:(\d+)s)? $/x){
    my $s = 0;
    $s += $1 * 60 * 60 if defined $1;
    $s += $2 * 60 if defined $2;
    $s += $3 if defined $3;
    return $s;
  }else{
    return undef;
  }
}

sub normalizeTime($){
  my $time = shift;
  my $relTimeSeconds = getRelativeTimeSeconds($time);
  if(defined $relTimeSeconds and $relTimeSeconds > 60*60*24){
    die "relative times should be < 24 hours, since they are time-only\n";
  }
  if(defined $relTimeSeconds){
    my $sex = time() + $relTimeSeconds;
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($sex);
    $sec = twodigit $sec;
    $min = twodigit $min;
    $hour = twodigit $hour;

    $time = "$hour:$min:$sec";
  }
  return $time;
}

sub schedule($$){
  my $time = shift;
  my $repeat = shift;

  $time =~ s/am$//i;
  if($time =~ /(\d+)(.*)pm$/i){
    my $h = 12 + $1;
    $time = "$h$2";
  }

  $time = "$time:00" if $time =~ /^\d+$/;
  $time = "$time:00" if $time =~ /^\d+:\d+$/;

  if($time =~ /(\d+):(\d+):(\d+)/){
    my ($h, $m, $s) = ($1, $2, $3);
    if($h>=24 or $m>=60 or $s>=60){
      print STDERR "time '$time' is malformed\n";
      return undef;
    }
  }else{
    print STDERR "time '$time' is malformed\n";
    return undef;
  }

  return time();
}

for my $alarmFile(@alarmFiles){
  my $content = `cat $alarmFile`;
  my @lines = split /\n/, $content;
  my ($alarm, $sched) = (@lines, undef);

  my $repeat = getRepeatDays($alarm);
  $alarm =~ /^ (?:\@\S)? \s* (\S*) \s* (.*) $/x;
  my $time = defined $1 ? $1 : '';
  my $cmd = defined $2 ? $2 : '';

  $time = normalizeTime $time;
  $sched = schedule $time, $repeat if not defined $sched;

  print "
    cmd => '$cmd'
    time => '$time'
    sched => '$sched'
    repeat => '$repeat'
    alarm => '$alarm'\n";
}

