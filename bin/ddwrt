#!/usr/bin/perl
use strict;
use warnings;

my $file = "$ENV{HOME}/.ddwrt";
my $macRe = ("[a-fA-F0-9]{2}:" x 5) . "[a-fA-F0-9]{2}";

sub ddwrtRestore($);
sub getStarted($);
sub parse($);
sub getClientIds($);
sub decrypt($);
sub getNvram($);
sub getWifiNvram($);
sub getStaticLeasesNvram($);
sub getExtraNvram($);
sub getPortForwardingNvram($);

sub assertPresent($$;$){
  my ($c, $section, $item) = @_;
  if(defined $item){
    die "Missing $section.$item\n" if not defined $$c{$section}{$item};
  }else{
    die "Missing section $section\n" if not defined $$c{$section};
  }
}

sub main(@){
  my $c = parse $file;
  assertPresent $c, 'config';
  assertPresent $c, 'config', 'ip_prefix';
  assertPresent $c, 'config', 'router_ip';
  assertPresent $c, 'clients';
  ddwrtRestore $c;
}

sub ddwrtRestore($){
  my $c = shift;
  my $ip = $$c{config}{router_ip};

  my $orig = `ssh root\@$ip nvram show`;
  open FH, "> orig";
  print FH $orig;
  close FH;

  for my $entry(getNvram($c)){
    system "ssh root\@$ip nvram set '$entry'";
  }

  my $new = `ssh root\@$ip nvram show`;
  open FH, "> new";
  print FH $new;
  close FH;
}

sub getStarted($){
  my $c = shift;
  return "
1) hold pin, or Administration => Factory Defaults => Restore => Ok
2) wconnect $$c{config}{default_ssid} WPA $$c{config}{default_wpa}
3) browser $$c{config}{ip} => Services => Secure Shell => SSHd Enable
4) root for username, make up a real password
5) $0 restore
";
}

sub parse($){
  my $file = shift;
  open FH, "< $file" or die "Couldnt open $file for reading\n";
  my @lines = <FH>;
  close FH;

  my $c = {};
  my $sectionName = undef;
  for my $line(@lines){
    $line =~ s/#.*//;
    if($line =~ /^ \s* \[ \s* (.+?) \s* \] \s* $/x){
      $sectionName = $1;
    }elsif($line =~ /^ \s* ([^=\ \n\t]+) \s* = \s* (.*)$/x){
      my $section;
      if(not defined $sectionName){
        die "Malformed config file line {missing header}: $line\n";
      }elsif(not defined $$c{$sectionName}){
        $section = {};
        $$c{$sectionName} = $section;
      }else{
        $section = $$c{$sectionName};
      }
      $$section{$1} = $2;
    }elsif($line !~ /^\s*$/){
      die "Malformed config file line: $line\n";
    }
  }
  return $c;
}

sub getClientIds($){
  my $c = shift;
  my @ids = sort keys %{$$c{clients}};
  for my $id(@ids){
    die "ID '$id' needs to be two digits\n" if $id !~ /^\d\d$/;
  }
  return @ids;
}

sub decrypt($){
  my $s = shift;
  my $new = `gpg-sym $s`;
  chomp $new;
  return $new;
}

sub getNvram($){
  my $c = shift;
  return (
    getWifiNvram($c),
    getStaticLeasesNvram($c),
    getPortForwardingNvram($c),
    getExtraNvram($c),
  );
}

sub getWifiNvram($){
  my $c = shift;
  my @entries;

  my %keymap = (
    ssid => 'ssid',
    mode => 'net_mode',
    channel => 'channel',
    bandwidth => 'channelbw',
    wpa => 'wpa_psk',
  );

  for my $section(keys %$c){
    if($section =~ /^ath\d+$/){
      my $radio = $section;
      my $s = $$c{$radio};
      $$s{wpa} = decrypt $$s{wpa} if defined $$s{wpa};
      for my $key(sort keys %keymap){
        push @entries, "${radio}_$keymap{$key}=$$s{$key}" if defined $$s{$key};
      }
    }
  }
  return @entries;
}

sub getStaticLeasesNvram($){
  my $c = shift;
  my $ipPrefix = $$c{config}{ip_prefix};

  my @entries;
  for my $id(getClientIds($c)){
    my $val = $$c{clients}{$id};
    if($val !~ /^($macRe)\s*(.*)$/){
      die "Malformed client line: $val\n";
    }
    my ($mac, $hostname) = ($1, $2);
    push @entries, "$mac=$hostname=$ipPrefix.$id";
  }

  my $leaseNum = 'static_leasenum=' . (@entries + 1);
  my $leases = 'static_leases=' . join ' ', @entries;
  return ($leaseNum, $leases);
}

sub getPortForwardingNvram($){
  my $c = shift;
  my $ip_prefix = $$c{config}{ip_prefix};

  my @entries;
  if(defined $$c{forwards}){
    for my $name(keys %{$$c{forwards}}){
      my $val = $$c{forwards}{$name};
      if($val !~ /^(\d+) \s* (\d+) \s* (\d+) \s* (udp|tcp|both)$/x){
        die "Malformed forward line {id from to udp|tcp|both}: $val\n";
      }
      my ($id, $from, $to, $type) = ($1, $2, $3, $4);
      push @entries, "$name:on:$type:$from>$ip_prefix.$id:$to";
    }
  }

  my $trans_port_prefix = $$c{config}{trans_port_prefix};
  my $ssh_port_prefix = $$c{config}{ssh_port_prefix};
  my $trans_port_prefix_alt = $$c{config}{trans_port_prefix_alt};
  my $ssh_port_prefix_alt = $$c{config}{ssh_port_prefix_alt};

  if(defined $ssh_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "ssh-$id";
      my $port = "$ssh_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $ssh_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "ssh-alt-$id";
      $id += 20;
      my $port = "$ssh_port_prefix_alt$id";
      push @entries, "ssh-alt-$id:on:both:$port>$ip_prefix.$id:22";
    }
  }
  if(defined $trans_port_prefix){
    for my $id(getClientIds($c)){
      my $name = "trans-$id";
      my $port = "$trans_port_prefix$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }
  if(defined $trans_port_prefix_alt){
    for my $id(getClientIds($c)){
      my $name = "trans-alt-$id";
      $id += 20;
      my $port = "$trans_port_prefix_alt$id";
      push @entries, "$name:on:both:$port>$ip_prefix.$id:$port";
    }
  }

  my $fwdNum = 'forwardspec_entries=' . (@entries + 0);
  my $fwd = 'forward_spec=' . join ' ', @entries;
  return ($fwdNum, $fwd);
}

sub getExtraNvram($){
  my $c = shift;
  my @nvram;
  if(defined $$c{nvram}){
    for my $key(keys %{$$c{nvram}}){
      push @nvram, "$key=$$c{nvram}{$key}";
    }
  }
  return @nvram;
}

&main(@ARGV);
