#!/usr/bin/perl
use strict;
use warnings;

my $pacmd = "pacmd";

my $usage = "Usage:
  $0 speaker|sink|microphone|source
  $0 speaker|sink|microphone|source [mute|unmute|toggle]

  Either speaker/sink or microphone/source must be specified.
  Prints the current mute status of speaker(sink) or microphone(source).
  If the optional command is present, also either mutes or unmutes.
";

sub getMuteStatuses($){
  my $device = shift;
  my %muteStatuses;
  my @lines = `$pacmd list-${device}s`;
  for(my $i=0; $i<@lines; $i++){
    my $line = $lines[$i];
    if($line =~ /^  [ *] index: (\d+)$/){
      my $index = $1;
      for(; $i<@lines; $i++){
        $line = $lines[$i];
        if($line =~ /^\tmuted: (yes|no)/){
          $muteStatuses{$index} = ($1 eq 'yes');
          last;
        }
      }
    }
  }
  return %muteStatuses;
}

my $device = shift;
$device = '' if not defined $device;
if($device eq 'speaker' or $device eq 'sink'){
  $device = 'sink';
}elsif($device eq 'microphone' or $device eq 'source'){
  $device = 'source';
}else{
  die $usage;
}

my %muteStatuses = getMuteStatuses($device);
my $isMuted = 1;
for my $mute(values %muteStatuses){
  if(not $mute){
    $isMuted = 0;
    last;
  }
}

print "$device is ";
print "not " if not $isMuted;
print "muted\n";

my $command = shift;
$command = '' if not defined $command;
if($command eq 'toggle'){
  if($isMuted){
    $command = 'unmute';
  }else{
    $command = 'mute';
  }
}
if($command eq 'mute'){
  print "muting\n";
  for my $index(keys %muteStatuses){
    `$pacmd set-$device-mute $index 1`;
  }
}elsif($command eq 'unmute'){
  print "unmuting\n";
  for my $index(keys %muteStatuses){
    `$pacmd set-$device-mute $index 0`;
  }
}elsif($command ne ''){
  die $usage;
}
