#! /usr/bin/runghc
import Prelude hiding (Right, Left)
import Control.Monad
import Control.Applicative
import Data.Char
import Data.List
import Data.Maybe
import System.Environment
import System.Process
import Text.Regex.PCRE ((=~))

-- * Types and Helpers
data Direction = Deasil | Widdershins deriving (Eq, Read, Show)

data Rotation = Normal | Right | Inverted | Left
    deriving (Eq, Bounded, Enum, Read, Show)

rotations :: [Rotation]
rotations = [minBound .. maxBound]

readLC :: (Read a) => String -> a
readLC (c:cs) = read $ toUpper c : map toLower cs

showLC :: (Show a) => a -> String
showLC = map toLower . show

type DisplayNumber = Int
type DisplayName = String
type PointerNumber = String
type PointerName = String

newtype DisplayInfo = DI {diString :: String}
newtype PointerInfo = PI {piString :: String}

-- * Rotations
rotateAll :: DisplayNumber -> [PointerName] -> Direction -> IO ()
rotateAll dn ptrs dir = rotateDisplay dn dir >>= forM_ ptrs . flip rotatePointer

run :: String -> [String] -> IO String
run proc args = readProcess proc args ""

rotateDisplay :: DisplayNumber -> Direction -> IO Rotation
rotateDisplay dn dir = do
    di <- displayInfo
    let rot = nextRotation dn dir di
    let disp = displayName dn di
    run "xrandr" ["--output", disp, "--rotate", showLC rot]
    return rot

rotatePointer :: PointerName -> Rotation -> IO ()
rotatePointer ptr rot = do
    pn <- idNo ptr <$> pointerInfo
    propNo <- flip idNo <$> pointerPropInfo pn
    let rotate args = run "xinput" (["--set-prop", pn] ++ args) >> return ()
    rotate [propNo "Swap" , swapBit rot]
    rotate [propNo "Inversion", invXBit rot, invYBit rot]

displayInfo :: IO DisplayInfo
displayInfo = DI <$> run "xrandr" ["--query", "--verbose"]

pointerInfo :: IO PointerInfo
pointerInfo = PI <$> run "xinput" ["--list"]

pointerPropInfo :: PointerNumber -> IO PointerInfo
pointerPropInfo pn = PI <$> run "xinput" ["--list-props", pn]

-- * Regex Functions
fullMatch :: String -> String -> (String, String, String, [String])
fullMatch = flip (=~)

match :: String -> String -> String
match pat = (\(_,_,_,[r]) -> r) . fullMatch pat

skip :: String -> String -> String
skip pat = (\(_,_,r,_) -> r) . fullMatch pat

matchNth :: String -> Int -> String -> String
matchNth pat n = match pat . (!! n) . iterate (skip pat)

-- * Rotate Display Functions
nextRotation :: DisplayNumber -> Direction -> DisplayInfo -> Rotation
nextRotation dn dir di = (!! 1) . dropWhile (/= current) $ rots
  where
    rots = cycle . (if dir == Deasil then id else reverse) $ rotations
    current = readLC . matchNth rotrx dn . diString $ di
    rotrx = "(" ++ (intercalate "|" . map showLC $ rotations) ++ ")" ++ " \\("

displayName :: DisplayNumber -> DisplayInfo -> DisplayName
displayName dn = matchNth "(\\w+) connected" dn . diString

-- * Rotate Pointer Functions
idNo :: String -> PointerInfo -> String
idNo name = match (name ++ "\\s+\\D+(\\d+)") . piString

rotationBit :: (Int -> Int) -> Rotation -> String
rotationBit f = showLC . f . fromJust . (`elemIndex` rotations)
invXBit = rotationBit (`div` 2)
invYBit = rotationBit (signum . (`mod` 3))
swapBit = rotationBit (`mod` 2)

-- * Main and Args
main :: IO ()
main = join $ rotateAll <$> displayArg <*> pointerArgs <*> directionArg

findArgs :: (String -> Bool) -> ([String] -> b) -> b -> IO b
findArgs p f z = return . trans . filter p =<< getArgs
  where trans xs = case xs of {[] -> z ; _ -> f xs}

displayArg :: IO DisplayNumber
displayArg = findArgs isNat (read . head) 0

directionArg :: IO Direction
directionArg = findArgs isDeasil (const Deasil . head) Widdershins

pointerArgs :: IO [PointerName]
pointerArgs = findArgs (not . otherArg) id ["TrackPoint", "TouchPad"]
  where otherArg a = or . map ($ a) $ [isNat, isDeasil, isWiddershins]

isNat :: String -> Bool
isNat = all isDigit

isDeasil :: String -> Bool
isDeasil = (`elem` deasil) . map toLower
  where deasil = [ "deasil", "right", "starboard", "clockwise", "cockwise"]

isWiddershins :: String -> Bool
isWiddershins = (`elem` widdershins) . map toLower
  where
    widdershins = [ "widdershins", "left", "port"] ++ anti ++ counter
    anti = ["anticlockwise", "anticockwise"]
    counter = ["counterclockwise", "countercockwise"]
